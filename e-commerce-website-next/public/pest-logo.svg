<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100%" viewBox="0 0 600 600" enable-background="new 0 0 600 600" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
<path fill="#211F20" opacity="1.000000" stroke="none" d=" M418.000000,601.000000   C278.695557,601.000000 139.891144,601.000000 1.043357,601.000000   C1.043357,401.070557 1.043357,201.141098 1.043357,1.105817   C200.887772,1.105817 400.775604,1.105817 600.831726,1.105817   C600.831726,200.999878 600.831726,400.999939 600.831726,601.000000   C540.141052,601.000000 479.320526,601.000000 418.000000,601.000000  M118.870972,170.704315   C110.478775,165.487030 102.086578,160.269745 92.959396,154.595535   C93.903122,168.849228 94.816635,182.092651 95.650375,195.341110   C98.335716,238.012146 100.938042,280.688568 103.724739,323.352936   C104.085220,328.871948 103.447807,333.751984 99.912712,338.244232   C97.530899,341.270905 95.741699,344.763977 93.003044,349.142578   C97.731979,347.351624 101.168823,346.050018 104.857231,344.653137   C106.166214,365.720001 107.435257,386.131897 108.702576,406.543915   C109.958649,426.774689 111.386421,446.997406 112.345894,467.242249   C112.585121,472.290009 115.110626,474.396423 119.643997,476.174835   C119.735565,474.538940 119.835579,473.285645 119.871658,472.030487   C121.254501,423.927643 122.601036,375.823700 124.105560,327.724670   C124.175591,325.485779 125.110397,322.825592 126.555305,321.147675   C140.423645,305.042755 154.496399,289.113922 168.494736,273.120758   C182.278427,257.372894 196.043732,241.608902 209.891113,225.767319   C209.106277,224.687561 208.492416,223.737946 207.776352,222.872925   C174.588089,182.780914 141.269577,142.795425 108.340439,102.491791   C103.969444,97.141907 99.643715,95.981186 93.395226,97.697083   C94.009148,98.884064 94.461464,99.948112 95.072075,100.911880   C120.071350,140.369812 145.046463,179.843216 170.173065,219.219955   C172.083405,222.213699 172.124649,224.223373 170.198090,227.209564   C158.113434,245.940765 146.252670,264.816406 134.315887,283.642975   C131.521362,288.050476 128.719345,292.453247 125.920761,296.858185   C125.010246,294.346985 124.954247,292.097168 125.018646,289.850830   C126.006088,255.405838 126.706032,220.947784 128.238571,186.526886   C128.587494,178.689728 126.555298,173.899124 118.870972,170.704315  M420.197388,127.655807   C379.719879,177.827271 339.242371,227.998734 298.552094,278.433899   C316.482971,288.863129 333.650696,298.848480 350.918274,308.891937   C350.173401,310.355194 349.753937,311.245483 349.278107,312.104553   C318.087311,368.410492 286.984344,424.765503 255.575516,480.949554   C251.813507,487.679016 253.242920,494.200745 253.736877,501.052734   C299.604004,432.014130 345.471161,362.975525 391.655029,293.460236   C373.011444,286.528687 355.006714,279.834686 336.789490,273.061646   C337.543030,271.716614 337.978363,270.830841 338.509552,270.006897   C369.146118,222.483566 399.724396,174.922287 430.535248,127.512161   C433.667358,122.692619 433.271271,118.109032 432.781281,112.232445   C428.352539,117.677460 424.510925,122.400597 420.197388,127.655807  M268.066223,242.617981   C278.912994,228.352142 289.759735,214.086319 300.606506,199.820480   C300.244598,199.460556 299.882660,199.100632 299.520752,198.740707   C293.115143,201.119125 286.667511,203.123276 281.438477,208.208374   C255.236298,233.689499 228.868195,259.000031 202.555817,284.367859   C192.885849,293.690704 183.208801,303.006226 173.318741,312.533356   C203.383591,346.424469 233.164673,379.995697 262.945740,413.566925   C263.394012,408.884430 262.654724,404.770172 262.662415,400.657288   C262.673615,394.674042 260.094330,389.883148 256.976685,385.082001   C250.095520,374.484985 243.418350,363.755341 236.678253,353.066986   C230.671600,343.541748 224.692215,333.999329 218.503540,324.150543   C219.946609,323.625580 220.819122,323.197296 221.741333,322.989624   C232.602325,320.543945 243.408539,317.775726 254.363358,315.859497   C259.873260,314.895660 262.460907,311.674347 264.968384,307.060547   C251.961258,304.015808 239.373108,301.069122 225.889313,297.912811   C240.073929,279.309296 253.849258,261.242554 268.066223,242.617981  M430.991791,430.500000   C431.039795,437.662201 430.619263,444.871002 431.324615,451.967865   C431.702881,455.773468 434.017700,459.386627 435.458649,463.086609   C435.953033,462.885071 436.447449,462.683533 436.941864,462.481964   C444.629486,390.872986 452.317139,319.264008 460.020050,247.512573   C456.166229,246.482834 452.670349,245.548737 449.174469,244.614639   C461.817352,239.740021 474.168884,235.216187 486.866974,232.108231   C495.250122,230.056396 496.859558,223.851898 499.869415,217.131943   C461.482483,223.744949 423.900879,230.219223 385.777283,236.786880   C388.430847,245.317459 390.866608,253.147919 393.347534,261.123657   C405.812439,257.253571 417.687592,253.566559 430.991852,249.435852   C430.991852,309.996521 430.991852,369.748260 430.991791,430.500000  z"/>
<path fill="#FBFBFB" opacity="1.000000" stroke="none" d=" M119.176010,170.903107   C126.555298,173.899124 128.587494,178.689728 128.238571,186.526886   C126.706032,220.947784 126.006088,255.405838 125.018646,289.850830   C124.954247,292.097168 125.010246,294.346985 125.920761,296.858185   C128.719345,292.453247 131.521362,288.050476 134.315887,283.642975   C146.252670,264.816406 158.113434,245.940765 170.198090,227.209564   C172.124649,224.223373 172.083405,222.213699 170.173065,219.219955   C145.046463,179.843216 120.071350,140.369812 95.072075,100.911880   C94.461464,99.948112 94.009148,98.884064 93.395226,97.697083   C99.643715,95.981186 103.969444,97.141907 108.340439,102.491791   C141.269577,142.795425 174.588089,182.780914 207.776352,222.872925   C208.492416,223.737946 209.106277,224.687561 209.891113,225.767319   C196.043732,241.608902 182.278427,257.372894 168.494736,273.120758   C154.496399,289.113922 140.423645,305.042755 126.555305,321.147675   C125.110397,322.825592 124.175591,325.485779 124.105560,327.724670   C122.601036,375.823700 121.254501,423.927643 119.871658,472.030487   C119.835579,473.285645 119.735565,474.538940 119.643997,476.174835   C115.110626,474.396423 112.585121,472.290009 112.345894,467.242249   C111.386421,446.997406 109.958649,426.774689 108.702576,406.543915   C107.435257,386.131897 106.166214,365.720001 104.857231,344.653137   C101.168823,346.050018 97.731979,347.351624 93.003044,349.142578   C95.741699,344.763977 97.530899,341.270905 99.912712,338.244232   C103.447807,333.751984 104.085220,328.871948 103.724739,323.352936   C100.938042,280.688568 98.335716,238.012146 95.650375,195.341110   C94.816635,182.092651 93.903122,168.849228 92.959396,154.595535   C102.086578,160.269745 110.478775,165.487030 119.176010,170.903107  z"/>
<path fill="#F9F9F9" opacity="1.000000" stroke="none" d=" M420.433350,127.389771   C424.510925,122.400597 428.352539,117.677460 432.781281,112.232445   C433.271271,118.109032 433.667358,122.692619 430.535248,127.512161   C399.724396,174.922287 369.146118,222.483566 338.509552,270.006897   C337.978363,270.830841 337.543030,271.716614 336.789490,273.061646   C355.006714,279.834686 373.011444,286.528687 391.655029,293.460236   C345.471161,362.975525 299.604004,432.014130 253.736877,501.052734   C253.242920,494.200745 251.813507,487.679016 255.575516,480.949554   C286.984344,424.765503 318.087311,368.410492 349.278107,312.104553   C349.753937,311.245483 350.173401,310.355194 350.918274,308.891937   C333.650696,298.848480 316.482971,288.863129 298.552094,278.433899   C339.242371,227.998734 379.719879,177.827271 420.433350,127.389771  z"/>
<path fill="#FAF9F9" opacity="1.000000" stroke="none" d=" M267.845398,242.896912   C253.849258,261.242554 240.073929,279.309296 225.889313,297.912811   C239.373108,301.069122 251.961258,304.015808 264.968384,307.060547   C262.460907,311.674347 259.873260,314.895660 254.363358,315.859497   C243.408539,317.775726 232.602325,320.543945 221.741333,322.989624   C220.819122,323.197296 219.946609,323.625580 218.503540,324.150543   C224.692215,333.999329 230.671600,343.541748 236.678253,353.066986   C243.418350,363.755341 250.095520,374.484985 256.976685,385.082001   C260.094330,389.883148 262.673615,394.674042 262.662415,400.657288   C262.654724,404.770172 263.394012,408.884430 262.945740,413.566925   C233.164673,379.995697 203.383591,346.424469 173.318741,312.533356   C183.208801,303.006226 192.885849,293.690704 202.555817,284.367859   C228.868195,259.000031 255.236298,233.689499 281.438477,208.208374   C286.667511,203.123276 293.115143,201.119125 299.520752,198.740707   C299.882660,199.100632 300.244598,199.460556 300.606506,199.820480   C289.759735,214.086319 278.912994,228.352142 267.845398,242.896912  z"/>
<path fill="#FAFAFA" opacity="1.000000" stroke="none" d=" M430.991821,430.000000   C430.991852,369.748260 430.991852,309.996521 430.991852,249.435852   C417.687592,253.566559 405.812439,257.253571 393.347534,261.123657   C390.866608,253.147919 388.430847,245.317459 385.777283,236.786880   C423.900879,230.219223 461.482483,223.744949 499.869415,217.131943   C496.859558,223.851898 495.250122,230.056396 486.866974,232.108231   C474.168884,235.216187 461.817352,239.740021 449.174469,244.614639   C452.670349,245.548737 456.166229,246.482834 460.020050,247.512573   C452.317139,319.264008 444.629486,390.872986 436.941864,462.481964   C436.447449,462.683533 435.953033,462.885071 435.458649,463.086609   C434.017700,459.386627 431.702881,455.773468 431.324615,451.967865   C430.619263,444.871002 431.039795,437.662201 430.991821,430.000000  z"/>
</svg>